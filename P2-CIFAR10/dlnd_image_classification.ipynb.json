{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Image Classification\n",
    "In this project, you'll classify images from the [CIFAR-10 dataset](https://www.cs.toronto.edu/~kriz/cifar.html).  The dataset consists of airplanes, dogs, cats, and other objects. You'll preprocess the images, then train a convolutional neural network on all the samples. The images need to be normalized and the labels need to be one-hot encoded.  You'll get to apply what you learned and build a convolutional, max pooling, dropout, and fully connected layers.  At the end, you'll get to see your neural network's predictions on the sample images.\n",
    "## Get the Data\n",
    "Run the following cell to download the [CIFAR-10 dataset for python](https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "CIFAR-10 Dataset: 171MB [03:05, 920KB/s]                           \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All files found!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "from urllib.request import urlretrieve\n",
    "from os.path import isfile, isdir\n",
    "from tqdm import tqdm\n",
    "import problem_unittests as tests\n",
    "import tarfile\n",
    "\n",
    "cifar10_dataset_folder_path = 'cifar-10-batches-py'\n",
    "\n",
    "class DLProgress(tqdm):\n",
    "    last_block = 0\n",
    "\n",
    "    def hook(self, block_num=1, block_size=1, total_size=None):\n",
    "        self.total = total_size\n",
    "        self.update((block_num - self.last_block) * block_size)\n",
    "        self.last_block = block_num\n",
    "\n",
    "if not isfile('cifar-10-python.tar.gz'):\n",
    "    with DLProgress(unit='B', unit_scale=True, miniters=1, desc='CIFAR-10 Dataset') as pbar:\n",
    "        urlretrieve(\n",
    "            'https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz',\n",
    "            'cifar-10-python.tar.gz',\n",
    "            pbar.hook)\n",
    "\n",
    "if not isdir(cifar10_dataset_folder_path):\n",
    "    with tarfile.open('cifar-10-python.tar.gz') as tar:\n",
    "        tar.extractall()\n",
    "        tar.close()\n",
    "\n",
    "\n",
    "tests.test_folder_path(cifar10_dataset_folder_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore the Data\n",
    "The dataset is broken into batches to prevent your machine from running out of memory.  The CIFAR-10 dataset consists of 5 batches, named `data_batch_1`, `data_batch_2`, etc.. Each batch contains the labels and images that are one of the following:\n",
    "* airplane\n",
    "* automobile\n",
    "* bird\n",
    "* cat\n",
    "* deer\n",
    "* dog\n",
    "* frog\n",
    "* horse\n",
    "* ship\n",
    "* truck\n",
    "\n",
    "Understanding a dataset is part of making predictions on the data.  Play around with the code cell below by changing the `batch_id` and `sample_id`. The `batch_id` is the id for a batch (1-5). The `sample_id` is the id for a image and label pair in the batch.\n",
    "\n",
    "Ask yourself \"What are all possible labels?\", \"What is the range of values for the image data?\", \"Are the labels in order or random?\".  Answers to questions like these will help you preprocess the data and end up with better predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Stats of batch 1:\n",
      "Samples: 10000\n",
      "Label Counts: {0: 1005, 1: 974, 2: 1032, 3: 1016, 4: 999, 5: 937, 6: 1030, 7: 1001, 8: 1025, 9: 981}\n",
      "First 20 Labels: [6, 9, 9, 4, 1, 1, 2, 7, 8, 3, 4, 7, 7, 2, 9, 9, 9, 3, 2, 6]\n",
      "\n",
      "Example of Image 5:\n",
      "Image - Min Value: 0 Max Value: 252\n",
      "Image - Shape: (32, 32, 3)\n",
      "Label - Label Id: 1 Name: automobile\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1fda0fcef0>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 250,
       "width": 253
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import helper\n",
    "import numpy as np\n",
    "\n",
    "# Explore the dataset\n",
    "batch_id = 1\n",
    "sample_id = 5\n",
    "helper.display_stats(cifar10_dataset_folder_path, batch_id, sample_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Implement Preprocess Functions\n",
    "### Normalize\n",
    "In the cell below, implement the `normalize` function to take in image data, `x`, and return it as a normalized Numpy array. The values should be in the range of 0 to 1, inclusive.  The return object should be the same shape as `x`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "def normalize(x):\n",
    "    \"\"\"\n",
    "    Normalize a list of sample image data in the range of 0 to 1\n",
    "    : x: List of image data.  The image shape is (32, 32, 3)\n",
    "    : return: Numpy array of normalize data\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    \n",
    "    x = x.astype('float32')\n",
    "    x /= 255.0\n",
    "    return x\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_normalize(normalize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### One-hot encode\n",
    "Just like the previous code cell, you'll be implementing a function for preprocessing.  This time, you'll implement the `one_hot_encode` function. The input, `x`, are a list of labels.  Implement the function to return the list of labels as One-Hot encoded Numpy array.  The possible values for labels are 0 to 9. The one-hot encoding function should return the same encoding for each value between each call to `one_hot_encode`.  Make sure to save the map of encodings outside the function.\n",
    "\n",
    "Hint: Don't reinvent the wheel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "def one_hot_encode(x):\n",
    "    \"\"\"\n",
    "    One hot encode a list of sample labels. Return a one-hot encoded vector for each label.\n",
    "    : x: List of sample Labels\n",
    "    : return: Numpy array of one-hot encoded labels\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    one_hot = []\n",
    "    for i in x :\n",
    "        encode = np.zeros(10)\n",
    "        encode[i] += 1\n",
    "        one_hot.append(encode)\n",
    "        \n",
    "    return np.array(one_hot)\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_one_hot_encode(one_hot_encode)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Randomize Data\n",
    "As you saw from exploring the data above, the order of the samples are randomized.  It doesn't hurt to randomize it again, but you don't need to for this dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preprocess all the data and save it\n",
    "Running the code cell below will preprocess all the CIFAR-10 data and save it to file. The code below also uses 10% of the training data for validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "# Preprocess Training, Validation, and Testing Data\n",
    "helper.preprocess_and_save_data(cifar10_dataset_folder_path, normalize, one_hot_encode)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check Point\n",
    "This is your first checkpoint.  If you ever decide to come back to this notebook or have to restart the notebook, you can start from here.  The preprocessed data has been saved to disk."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "import pickle\n",
    "import problem_unittests as tests\n",
    "import helper\n",
    "\n",
    "# Load the Preprocessed Validation data\n",
    "valid_features, valid_labels = pickle.load(open('preprocess_validation.p', mode='rb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build the network\n",
    "For the neural network, you'll build each layer into a function.  Most of the code you've seen has been outside of functions. To test your code more thoroughly, we require that you put each layer in a function.  This allows us to give you better feedback and test for simple mistakes using our unittests before you submit your project.\n",
    "\n",
    "If you're finding it hard to dedicate enough time for this course a week, we've provided a small shortcut to this part of the project. In the next couple of problems, you'll have the option to use [TensorFlow Layers](https://www.tensorflow.org/api_docs/python/tf/layers) or [TensorFlow Layers (contrib)](https://www.tensorflow.org/api_guides/python/contrib.layers) to build each layer, except \"Convolutional & Max Pooling\" layer.  TF Layers is similar to Keras's and TFLearn's abstraction to layers, so it's easy to pickup.\n",
    "\n",
    "If you would like to get the most of this course, try to solve all the problems without TF Layers.  Let's begin!\n",
    "### Input\n",
    "The neural network needs to read the image data, one-hot encoded labels, and dropout keep probability. Implement the following functions\n",
    "* Implement `neural_net_image_input`\n",
    " * Return a [TF Placeholder](https://www.tensorflow.org/api_docs/python/tf/placeholder)\n",
    " * Set the shape using `image_shape` with batch size set to `None`.\n",
    " * Name the TensorFlow placeholder \"x\" using the TensorFlow `name` parameter in the [TF Placeholder](https://www.tensorflow.org/api_docs/python/tf/placeholder).\n",
    "* Implement `neural_net_label_input`\n",
    " * Return a [TF Placeholder](https://www.tensorflow.org/api_docs/python/tf/placeholder)\n",
    " * Set the shape using `n_classes` with batch size set to `None`.\n",
    " * Name the TensorFlow placeholder \"y\" using the TensorFlow `name` parameter in the [TF Placeholder](https://www.tensorflow.org/api_docs/python/tf/placeholder).\n",
    "* Implement `neural_net_keep_prob_input`\n",
    " * Return a [TF Placeholder](https://www.tensorflow.org/api_docs/python/tf/placeholder) for dropout keep probability.\n",
    " * Name the TensorFlow placeholder \"keep_prob\" using the TensorFlow `name` parameter in the [TF Placeholder](https://www.tensorflow.org/api_docs/python/tf/placeholder).\n",
    "\n",
    "These names will be used at the end of the project to load your saved model.\n",
    "\n",
    "Note: `None` for shapes in TensorFlow allow for a dynamic size."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Image Input Tests Passed.\n",
      "Label Input Tests Passed.\n",
      "Keep Prob Tests Passed.\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "def neural_net_image_input(image_shape):\n",
    "    \"\"\"\n",
    "    Return a Tensor for a bach of image input\n",
    "    : image_shape: Shape of the images\n",
    "    : return: Tensor for image input.\n",
    "    \"\"\"\n",
    "    shape = [None]\n",
    "    # TODO: Implement Function\n",
    "    for s in image_shape :\n",
    "        shape.append(s)\n",
    "\n",
    "    return tf.placeholder(tf.float32,shape = shape, name = \"x\")\n",
    "\n",
    "\n",
    "def neural_net_label_input(n_classes):\n",
    "    \"\"\"\n",
    "    Return a Tensor for a batch of label input\n",
    "    : n_classes: Number of classes\n",
    "    : return: Tensor for label input.\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    return tf.placeholder(tf.float32,[None,n_classes], name = \"y\")\n",
    "\n",
    "\n",
    "def neural_net_keep_prob_input():\n",
    "    \"\"\"\n",
    "    Return a Tensor for keep probability\n",
    "    : return: Tensor for keep probability.\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    return tf.placeholder(tf.float32, name = \"keep_prob\")\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tf.reset_default_graph()\n",
    "tests.test_nn_image_inputs(neural_net_image_input)\n",
    "tests.test_nn_label_inputs(neural_net_label_input)\n",
    "tests.test_nn_keep_prob_inputs(neural_net_keep_prob_input)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convolution and Max Pooling Layer\n",
    "Convolution layers have a lot of success with images. For this code cell, you should implement the function `conv2d_maxpool` to apply convolution then max pooling:\n",
    "* Create the weight and bias using `conv_ksize`, `conv_num_outputs` and the shape of `x_tensor`.\n",
    "* Apply a convolution to `x_tensor` using weight and `conv_strides`.\n",
    " * We recommend you use same padding, but you're welcome to use any padding.\n",
    "* Add bias\n",
    "* Add a nonlinear activation to the convolution.\n",
    "* Apply Max Pooling using `pool_ksize` and `pool_strides`.\n",
    " * We recommend you use same padding, but you're welcome to use any padding.\n",
    "\n",
    "Note: You **can't** use [TensorFlow Layers](https://www.tensorflow.org/api_docs/python/tf/layers) or [TensorFlow Layers (contrib)](https://www.tensorflow.org/api_guides/python/contrib.layers) for this layer.  You're free to use any TensorFlow package for all the other layers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "def conv2d_maxpool(x_tensor, conv_num_outputs, conv_ksize, conv_strides, pool_ksize, pool_strides):\n",
    "    \"\"\"\n",
    "    Apply convolution then max pooling to x_tensor\n",
    "    :param x_tensor: TensorFlow Tensor\n",
    "    :param conv_num_outputs: Number of outputs for the convolutional layer\n",
    "    :param conv_strides: Stride 2-D Tuple for convolution\n",
    "    :param pool_ksize: kernal size 2-D Tuple for pool\n",
    "    :param pool_strides: Stride 2-D Tuple for pool\n",
    "    : return: A tensor that represents convolution and max pooling of x_tensor\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    input_depth = x_tensor.get_shape().as_list()[-1]\n",
    "\n",
    "    weights = tf.Variable(tf.truncated_normal(\n",
    "        [conv_ksize[0], conv_ksize[1], input_depth, conv_num_outputs],\n",
    "        mean = 0, stddev = 0.1))\n",
    "    bias = tf.Variable(tf.zeros([conv_num_outputs]))\n",
    "    \n",
    "    x = tf.nn.conv2d(x_tensor, weights, strides=[1,conv_strides[0],conv_strides[1],1], padding='SAME')\n",
    "    x = tf.nn.bias_add(x, bias)\n",
    "    x = tf.nn.relu(x)\n",
    "    x = tf.nn.max_pool(x, ksize=[1,pool_ksize[0],pool_ksize[1],1]\n",
    "                       , strides=[1,pool_strides[0],pool_strides[1],1]\n",
    "                       , padding='SAME')\n",
    "    return x\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_con_pool(conv2d_maxpool)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Flatten Layer\n",
    "Implement the `flatten` function to change the dimension of `x_tensor` from a 4-D tensor to a 2-D tensor.  The output should be the shape (*Batch Size*, *Flattened Image Size*). You can use [TensorFlow Layers](https://www.tensorflow.org/api_docs/python/tf/layers) or [TensorFlow Layers (contrib)](https://www.tensorflow.org/api_guides/python/contrib.layers) for this layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "def flatten(x_tensor):\n",
    "    \"\"\"\n",
    "    Flatten x_tensor to (Batch Size, Flattened Image Size)\n",
    "    : x_tensor: A tensor of size (Batch Size, ...), where ... are the image dimensions.\n",
    "    : return: A tensor of size (Batch Size, Flattened Image Size).\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    x_tensor = tf.contrib.layers.flatten(x_tensor)\n",
    "    return x_tensor\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_flatten(flatten)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fully-Connected Layer\n",
    "Implement the `fully_conn` function to apply a fully connected layer to `x_tensor` with the shape (*Batch Size*, *num_outputs*). You can use [TensorFlow Layers](https://www.tensorflow.org/api_docs/python/tf/layers) or [TensorFlow Layers (contrib)](https://www.tensorflow.org/api_guides/python/contrib.layers) for this layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "def fully_conn(x_tensor, num_outputs):\n",
    "    \"\"\"\n",
    "    Apply a fully connected layer to x_tensor using weight and bias\n",
    "    : x_tensor: A 2-D tensor where the first dimension is batch size.\n",
    "    : num_outputs: The number of output that the new tensor should be.\n",
    "    : return: A 2-D tensor where the second dimension is num_outputs.\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    x_tensor = tf.contrib.layers.fully_connected(x_tensor,num_outputs,activation_fn=tf.nn.relu)\n",
    "    return x_tensor\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_fully_conn(fully_conn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Output Layer\n",
    "Implement the `output` function to apply a fully connected layer to `x_tensor` with the shape (*Batch Size*, *num_outputs*). You can use [TensorFlow Layers](https://www.tensorflow.org/api_docs/python/tf/layers) or [TensorFlow Layers (contrib)](https://www.tensorflow.org/api_guides/python/contrib.layers) for this layer.\n",
    "\n",
    "Note: Activation, softmax, or cross entropy shouldn't be applied to this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "def output(x_tensor, num_outputs):\n",
    "    \"\"\"\n",
    "    Apply a output layer to x_tensor using weight and bias\n",
    "    : x_tensor: A 2-D tensor where the first dimension is batch size.\n",
    "    : num_outputs: The number of output that the new tensor should be.\n",
    "    : return: A 2-D tensor where the second dimension is num_outputs.\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    x_tensor = tf.contrib.layers.fully_connected(x_tensor,num_outputs)\n",
    "    return x_tensor\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_output(output)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create Convolutional Model\n",
    "Implement the function `conv_net` to create a convolutional neural network model. The function takes in a batch of images, `x`, and outputs logits.  Use the layers you created above to create this model:\n",
    "\n",
    "* Apply 1, 2, or 3 Convolution and Max Pool layers\n",
    "* Apply a Flatten Layer\n",
    "* Apply 1, 2, or 3 Fully Connected Layers\n",
    "* Apply an Output Layer\n",
    "* Return the output\n",
    "* Apply [TensorFlow's Dropout](https://www.tensorflow.org/api_docs/python/tf/nn/dropout) to one or more layers in the model using `keep_prob`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Neural Network Built!\n"
     ]
    }
   ],
   "source": [
    "def conv_net(x, keep_prob):\n",
    "    \"\"\"\n",
    "    Create a convolutional neural network model\n",
    "    : x: Placeholder tensor that holds image data.\n",
    "    : keep_prob: Placeholder tensor that hold dropout keep probability.\n",
    "    : return: Tensor that represents logits\n",
    "    \"\"\"\n",
    "    # TODO: Apply 1, 2, or 3 Convolution and Max Pool layers\n",
    "    #    Play around with different number of outputs, kernel size and stride\n",
    "    # Function Definition from Above:\n",
    "    #    conv2d_maxpool(x_tensor, conv_num_outputs, conv_ksize, conv_strides, pool_ksize, pool_strides)\n",
    "    conv1 = conv2d_maxpool(x,conv_num_outputs = 64,\n",
    "                             conv_ksize = (3,3),\n",
    "                             conv_strides = (1,1),\n",
    "                             pool_ksize = (2,2),\n",
    "                             pool_strides = (2,2))\n",
    "    \n",
    "    conv2 = conv2d_maxpool(conv1,conv_num_outputs = 128,\n",
    "                             conv_ksize = (3,3),\n",
    "                             conv_strides = (1,1),\n",
    "                             pool_ksize = (2,2),\n",
    "                             pool_strides = (2,2))\n",
    "    \n",
    "    conv3 = conv2d_maxpool(conv2,conv_num_outputs = 256,\n",
    "                             conv_ksize = (3,3),\n",
    "                             conv_strides = (1,1),\n",
    "                             pool_ksize = (2,2),\n",
    "                             pool_strides = (2,2))\n",
    "    \n",
    "    \n",
    "\n",
    "    # TODO: Apply a Flatten Layer\n",
    "    # Function Definition from Above:\n",
    "    #   flatten(x_tensor)\n",
    "    ft = flatten(conv3)\n",
    "    \n",
    "\n",
    "    # TODO: Apply 1, 2, or 3 Fully Connected Layers\n",
    "    #    Play around with different number of outputs\n",
    "    # Function Definition from Above:\n",
    "    #   fully_conn(x_tensor, num_outputs)\n",
    "    fc1 = fully_conn(ft,300)\n",
    "    fc1 = tf.nn.dropout(fc1, keep_prob)\n",
    "    \n",
    "    fc2 = fully_conn(fc1,100)\n",
    "    fc2 = tf.nn.dropout(fc2, keep_prob)\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    # TODO: Apply an Output Layer\n",
    "    #    Set this to the number of classes\n",
    "    # Function Definition from Above:\n",
    "    #   output(x_tensor, num_outputs)\n",
    "    out = output(fc2,10)\n",
    "    \n",
    "    # TODO: return output\n",
    "    return out\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "\n",
    "##############################\n",
    "## Build the Neural Network ##\n",
    "##############################\n",
    "\n",
    "# Remove previous weights, bias, inputs, etc..\n",
    "tf.reset_default_graph()\n",
    "\n",
    "# Inputs\n",
    "x = neural_net_image_input((32, 32, 3))\n",
    "y = neural_net_label_input(10)\n",
    "keep_prob = neural_net_keep_prob_input()\n",
    "\n",
    "# Model\n",
    "logits = conv_net(x, keep_prob)\n",
    "\n",
    "# Name logits Tensor, so that is can be loaded from disk after training\n",
    "logits = tf.identity(logits, name='logits')\n",
    "\n",
    "# Loss and Optimizer\n",
    "cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y))\n",
    "optimizer = tf.train.AdamOptimizer().minimize(cost)\n",
    "\n",
    "# Accuracy\n",
    "correct_pred = tf.equal(tf.argmax(logits, 1), tf.argmax(y, 1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32), name='accuracy')\n",
    "\n",
    "tests.test_conv_net(conv_net)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train the Neural Network\n",
    "### Single Optimization\n",
    "Implement the function `train_neural_network` to do a single optimization.  The optimization should use `optimizer` to optimize in `session` with a `feed_dict` of the following:\n",
    "* `x` for image input\n",
    "* `y` for labels\n",
    "* `keep_prob` for keep probability for dropout\n",
    "\n",
    "This function will be called for each batch, so `tf.global_variables_initializer()` has already been called.\n",
    "\n",
    "Note: Nothing needs to be returned. This function is only optimizing the neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "def train_neural_network(session, optimizer, keep_probability, feature_batch, label_batch):\n",
    "    \"\"\"\n",
    "    Optimize the session on a batch of images and labels\n",
    "    : session: Current TensorFlow session\n",
    "    : optimizer: TensorFlow optimizer function\n",
    "    : keep_probability: keep probability\n",
    "    : feature_batch: Batch of Numpy image data\n",
    "    : label_batch: Batch of Numpy label data\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    session.run(optimizer, feed_dict={\n",
    "        x : feature_batch,\n",
    "        y : label_batch,\n",
    "        keep_prob : keep_probability\n",
    "    })\n",
    "    pass\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_train_nn(train_neural_network)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Show Stats\n",
    "Implement the function `print_stats` to print loss and validation accuracy.  Use the global variables `valid_features` and `valid_labels` to calculate validation accuracy.  Use a keep probability of `1.0` to calculate the loss and validation accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def print_stats(session, feature_batch, label_batch, cost, accuracy):\n",
    "    \"\"\"\n",
    "    Print information about loss and validation accuracy\n",
    "    : session: Current TensorFlow session\n",
    "    : feature_batch: Batch of Numpy image data\n",
    "    : label_batch: Batch of Numpy label data\n",
    "    : cost: TensorFlow cost function\n",
    "    : accuracy: TensorFlow accuracy function\n",
    "    \"\"\"\n",
    "    # TODO: Implement Function\n",
    "    loss = session.run(cost, feed_dict={\n",
    "        x : feature_batch,\n",
    "        y : label_batch,\n",
    "        keep_prob : 1.\n",
    "        \n",
    "    })\n",
    "    valid_acc = session.run(accuracy, feed_dict={\n",
    "        x : valid_features,\n",
    "        y : valid_labels,\n",
    "        keep_prob : 1.\n",
    "        \n",
    "    })\n",
    "    print('Loss: {:>10.4f}    Validation Accuracy: {:.6f}'.format(loss,valid_acc))\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyperparameters\n",
    "Tune the following parameters:\n",
    "* Set `epochs` to the number of iterations until the network stops learning or start overfitting\n",
    "* Set `batch_size` to the highest number that your machine has memory for.  Most people set them to common sizes of memory:\n",
    " * 64\n",
    " * 128\n",
    " * 256\n",
    " * ...\n",
    "* Set `keep_probability` to the probability of keeping a node using dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# TODO: Tune Parameters\n",
    "epochs = 50\n",
    "batch_size = 512\n",
    "keep_probability = 0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train on a Single CIFAR-10 Batch\n",
    "Instead of training the neural network on all the CIFAR-10 batches of data, let's use a single batch. This should save time while you iterate on the model to get a better accuracy.  Once the final validation accuracy is 50% or greater, run the model on all the data in the next section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking the Training on a Single Batch...\n",
      "Epoch  1, CIFAR-10 Batch 1:  Loss:     2.3022    Validation Accuracy: 0.109600\n",
      "Epoch  2, CIFAR-10 Batch 1:  Loss:     2.2496    Validation Accuracy: 0.193600\n",
      "Epoch  3, CIFAR-10 Batch 1:  Loss:     2.1332    Validation Accuracy: 0.272400\n",
      "Epoch  4, CIFAR-10 Batch 1:  Loss:     1.9844    Validation Accuracy: 0.337000\n",
      "Epoch  5, CIFAR-10 Batch 1:  Loss:     1.8668    Validation Accuracy: 0.381600\n",
      "Epoch  6, CIFAR-10 Batch 1:  Loss:     1.8201    Validation Accuracy: 0.352800\n",
      "Epoch  7, CIFAR-10 Batch 1:  Loss:     1.7137    Validation Accuracy: 0.403400\n",
      "Epoch  8, CIFAR-10 Batch 1:  Loss:     1.5561    Validation Accuracy: 0.439400\n",
      "Epoch  9, CIFAR-10 Batch 1:  Loss:     1.4807    Validation Accuracy: 0.459600\n",
      "Epoch 10, CIFAR-10 Batch 1:  Loss:     1.3650    Validation Accuracy: 0.473800\n",
      "Epoch 11, CIFAR-10 Batch 1:  Loss:     1.3085    Validation Accuracy: 0.489400\n",
      "Epoch 12, CIFAR-10 Batch 1:  Loss:     1.2343    Validation Accuracy: 0.511000\n",
      "Epoch 13, CIFAR-10 Batch 1:  Loss:     1.1325    Validation Accuracy: 0.516200\n",
      "Epoch 14, CIFAR-10 Batch 1:  Loss:     1.0282    Validation Accuracy: 0.553400\n",
      "Epoch 15, CIFAR-10 Batch 1:  Loss:     0.9611    Validation Accuracy: 0.560000\n",
      "Epoch 16, CIFAR-10 Batch 1:  Loss:     0.8901    Validation Accuracy: 0.551200\n",
      "Epoch 17, CIFAR-10 Batch 1:  Loss:     0.8141    Validation Accuracy: 0.573800\n",
      "Epoch 18, CIFAR-10 Batch 1:  Loss:     0.7643    Validation Accuracy: 0.581800\n",
      "Epoch 19, CIFAR-10 Batch 1:  Loss:     0.7223    Validation Accuracy: 0.587600\n",
      "Epoch 20, CIFAR-10 Batch 1:  Loss:     0.6870    Validation Accuracy: 0.577800\n",
      "Epoch 21, CIFAR-10 Batch 1:  Loss:     0.5919    Validation Accuracy: 0.603800\n",
      "Epoch 22, CIFAR-10 Batch 1:  Loss:     0.6465    Validation Accuracy: 0.589200\n",
      "Epoch 23, CIFAR-10 Batch 1:  Loss:     0.4976    Validation Accuracy: 0.613000\n",
      "Epoch 24, CIFAR-10 Batch 1:  Loss:     0.5212    Validation Accuracy: 0.607600\n",
      "Epoch 25, CIFAR-10 Batch 1:  Loss:     0.4329    Validation Accuracy: 0.626400\n",
      "Epoch 26, CIFAR-10 Batch 1:  Loss:     0.4003    Validation Accuracy: 0.613400\n",
      "Epoch 27, CIFAR-10 Batch 1:  Loss:     0.3500    Validation Accuracy: 0.633600\n",
      "Epoch 28, CIFAR-10 Batch 1:  Loss:     0.3218    Validation Accuracy: 0.633200\n",
      "Epoch 29, CIFAR-10 Batch 1:  Loss:     0.3219    Validation Accuracy: 0.603600\n",
      "Epoch 30, CIFAR-10 Batch 1:  Loss:     0.3218    Validation Accuracy: 0.630000\n",
      "Epoch 31, CIFAR-10 Batch 1:  Loss:     0.2628    Validation Accuracy: 0.634200\n",
      "Epoch 32, CIFAR-10 Batch 1:  Loss:     0.2184    Validation Accuracy: 0.634200\n",
      "Epoch 33, CIFAR-10 Batch 1:  Loss:     0.2090    Validation Accuracy: 0.638000\n",
      "Epoch 34, CIFAR-10 Batch 1:  Loss:     0.2155    Validation Accuracy: 0.621000\n",
      "Epoch 35, CIFAR-10 Batch 1:  Loss:     0.1717    Validation Accuracy: 0.638000\n",
      "Epoch 36, CIFAR-10 Batch 1:  Loss:     0.1743    Validation Accuracy: 0.628600\n",
      "Epoch 37, CIFAR-10 Batch 1:  Loss:     0.1341    Validation Accuracy: 0.634400\n",
      "Epoch 38, CIFAR-10 Batch 1:  Loss:     0.1315    Validation Accuracy: 0.628400\n",
      "Epoch 39, CIFAR-10 Batch 1:  Loss:     0.1710    Validation Accuracy: 0.617600\n",
      "Epoch 40, CIFAR-10 Batch 1:  Loss:     0.1230    Validation Accuracy: 0.623800\n",
      "Epoch 41, CIFAR-10 Batch 1:  Loss:     0.1000    Validation Accuracy: 0.649000\n",
      "Epoch 42, CIFAR-10 Batch 1:  Loss:     0.1008    Validation Accuracy: 0.640000\n",
      "Epoch 43, CIFAR-10 Batch 1:  Loss:     0.0787    Validation Accuracy: 0.647800\n",
      "Epoch 44, CIFAR-10 Batch 1:  Loss:     0.0699    Validation Accuracy: 0.642400\n",
      "Epoch 45, CIFAR-10 Batch 1:  Loss:     0.0498    Validation Accuracy: 0.647000\n",
      "Epoch 46, CIFAR-10 Batch 1:  Loss:     0.0482    Validation Accuracy: 0.640000\n",
      "Epoch 47, CIFAR-10 Batch 1:  Loss:     0.0525    Validation Accuracy: 0.645200\n",
      "Epoch 48, CIFAR-10 Batch 1:  Loss:     0.0507    Validation Accuracy: 0.629200\n",
      "Epoch 49, CIFAR-10 Batch 1:  Loss:     0.0411    Validation Accuracy: 0.644200\n",
      "Epoch 50, CIFAR-10 Batch 1:  Loss:     0.0325    Validation Accuracy: 0.640600\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "print('Checking the Training on a Single Batch...')\n",
    "with tf.Session() as sess:\n",
    "    # Initializing the variables\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    \n",
    "    # Training cycle\n",
    "    for epoch in range(epochs):\n",
    "        batch_i = 1\n",
    "        for batch_features, batch_labels in helper.load_preprocess_training_batch(batch_i, batch_size):\n",
    "            train_neural_network(sess, optimizer, keep_probability, batch_features, batch_labels)\n",
    "        print('Epoch {:>2}, CIFAR-10 Batch {}:  '.format(epoch + 1, batch_i), end='')\n",
    "        print_stats(sess, batch_features, batch_labels, cost, accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fully Train the Model\n",
    "Now that you got a good accuracy with a single CIFAR-10 batch, try it with all five batches."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training...\n",
      "Epoch  1, CIFAR-10 Batch 1:  Loss:     2.3026    Validation Accuracy: 0.097800\n",
      "Epoch  1, CIFAR-10 Batch 2:  Loss:     2.2993    Validation Accuracy: 0.113800\n",
      "Epoch  1, CIFAR-10 Batch 3:  Loss:     2.2681    Validation Accuracy: 0.125600\n",
      "Epoch  1, CIFAR-10 Batch 4:  Loss:     2.1599    Validation Accuracy: 0.221000\n",
      "Epoch  1, CIFAR-10 Batch 5:  Loss:     2.0657    Validation Accuracy: 0.307400\n",
      "Epoch  2, CIFAR-10 Batch 1:  Loss:     1.9411    Validation Accuracy: 0.387600\n",
      "Epoch  2, CIFAR-10 Batch 2:  Loss:     1.7328    Validation Accuracy: 0.384000\n",
      "Epoch  2, CIFAR-10 Batch 3:  Loss:     1.5704    Validation Accuracy: 0.409400\n",
      "Epoch  2, CIFAR-10 Batch 4:  Loss:     1.4536    Validation Accuracy: 0.457600\n",
      "Epoch  2, CIFAR-10 Batch 5:  Loss:     1.4570    Validation Accuracy: 0.466800\n",
      "Epoch  3, CIFAR-10 Batch 1:  Loss:     1.4993    Validation Accuracy: 0.484200\n",
      "Epoch  3, CIFAR-10 Batch 2:  Loss:     1.3433    Validation Accuracy: 0.505200\n",
      "Epoch  3, CIFAR-10 Batch 3:  Loss:     1.2016    Validation Accuracy: 0.532200\n",
      "Epoch  3, CIFAR-10 Batch 4:  Loss:     1.1753    Validation Accuracy: 0.541400\n",
      "Epoch  3, CIFAR-10 Batch 5:  Loss:     1.1982    Validation Accuracy: 0.545200\n",
      "Epoch  4, CIFAR-10 Batch 1:  Loss:     1.2585    Validation Accuracy: 0.568200\n",
      "Epoch  4, CIFAR-10 Batch 2:  Loss:     1.1920    Validation Accuracy: 0.575800\n",
      "Epoch  4, CIFAR-10 Batch 3:  Loss:     1.0507    Validation Accuracy: 0.563000\n",
      "Epoch  4, CIFAR-10 Batch 4:  Loss:     1.0039    Validation Accuracy: 0.599200\n",
      "Epoch  4, CIFAR-10 Batch 5:  Loss:     1.0461    Validation Accuracy: 0.583800\n",
      "Epoch  5, CIFAR-10 Batch 1:  Loss:     1.0916    Validation Accuracy: 0.596200\n",
      "Epoch  5, CIFAR-10 Batch 2:  Loss:     1.0256    Validation Accuracy: 0.599600\n",
      "Epoch  5, CIFAR-10 Batch 3:  Loss:     0.9000    Validation Accuracy: 0.605800\n",
      "Epoch  5, CIFAR-10 Batch 4:  Loss:     0.8609    Validation Accuracy: 0.623600\n",
      "Epoch  5, CIFAR-10 Batch 5:  Loss:     0.8729    Validation Accuracy: 0.635800\n",
      "Epoch  6, CIFAR-10 Batch 1:  Loss:     0.9304    Validation Accuracy: 0.645400\n",
      "Epoch  6, CIFAR-10 Batch 2:  Loss:     0.9378    Validation Accuracy: 0.625800\n",
      "Epoch  6, CIFAR-10 Batch 3:  Loss:     0.7682    Validation Accuracy: 0.645800\n",
      "Epoch  6, CIFAR-10 Batch 4:  Loss:     0.7329    Validation Accuracy: 0.668000\n",
      "Epoch  6, CIFAR-10 Batch 5:  Loss:     0.8013    Validation Accuracy: 0.650200\n",
      "Epoch  7, CIFAR-10 Batch 1:  Loss:     0.8001    Validation Accuracy: 0.652600\n",
      "Epoch  7, CIFAR-10 Batch 2:  Loss:     0.7625    Validation Accuracy: 0.654600\n",
      "Epoch  7, CIFAR-10 Batch 3:  Loss:     0.6825    Validation Accuracy: 0.672400\n",
      "Epoch  7, CIFAR-10 Batch 4:  Loss:     0.6248    Validation Accuracy: 0.679800\n",
      "Epoch  7, CIFAR-10 Batch 5:  Loss:     0.7266    Validation Accuracy: 0.658000\n",
      "Epoch  8, CIFAR-10 Batch 1:  Loss:     0.7131    Validation Accuracy: 0.679400\n",
      "Epoch  8, CIFAR-10 Batch 2:  Loss:     0.6638    Validation Accuracy: 0.676200\n",
      "Epoch  8, CIFAR-10 Batch 3:  Loss:     0.5576    Validation Accuracy: 0.688600\n",
      "Epoch  8, CIFAR-10 Batch 4:  Loss:     0.5553    Validation Accuracy: 0.688800\n",
      "Epoch  8, CIFAR-10 Batch 5:  Loss:     0.6132    Validation Accuracy: 0.688200\n",
      "Epoch  9, CIFAR-10 Batch 1:  Loss:     0.6417    Validation Accuracy: 0.687800\n",
      "Epoch  9, CIFAR-10 Batch 2:  Loss:     0.5888    Validation Accuracy: 0.680000\n",
      "Epoch  9, CIFAR-10 Batch 3:  Loss:     0.4999    Validation Accuracy: 0.704600\n",
      "Epoch  9, CIFAR-10 Batch 4:  Loss:     0.4888    Validation Accuracy: 0.698400\n",
      "Epoch  9, CIFAR-10 Batch 5:  Loss:     0.5513    Validation Accuracy: 0.701000\n",
      "Epoch 10, CIFAR-10 Batch 1:  Loss:     0.5498    Validation Accuracy: 0.702800\n",
      "Epoch 10, CIFAR-10 Batch 2:  Loss:     0.5892    Validation Accuracy: 0.680400\n",
      "Epoch 10, CIFAR-10 Batch 3:  Loss:     0.4613    Validation Accuracy: 0.709400\n",
      "Epoch 10, CIFAR-10 Batch 4:  Loss:     0.4566    Validation Accuracy: 0.717000\n",
      "Epoch 10, CIFAR-10 Batch 5:  Loss:     0.5019    Validation Accuracy: 0.702400\n",
      "Epoch 11, CIFAR-10 Batch 1:  Loss:     0.4943    Validation Accuracy: 0.700600\n",
      "Epoch 11, CIFAR-10 Batch 2:  Loss:     0.5329    Validation Accuracy: 0.702800\n",
      "Epoch 11, CIFAR-10 Batch 3:  Loss:     0.3842    Validation Accuracy: 0.719000\n",
      "Epoch 11, CIFAR-10 Batch 4:  Loss:     0.4666    Validation Accuracy: 0.694000\n",
      "Epoch 11, CIFAR-10 Batch 5:  Loss:     0.4529    Validation Accuracy: 0.716600\n",
      "Epoch 12, CIFAR-10 Batch 1:  Loss:     0.4473    Validation Accuracy: 0.683800\n",
      "Epoch 12, CIFAR-10 Batch 2:  Loss:     0.4450    Validation Accuracy: 0.716600\n",
      "Epoch 12, CIFAR-10 Batch 3:  Loss:     0.3435    Validation Accuracy: 0.727800\n",
      "Epoch 12, CIFAR-10 Batch 4:  Loss:     0.4065    Validation Accuracy: 0.719400\n",
      "Epoch 12, CIFAR-10 Batch 5:  Loss:     0.4064    Validation Accuracy: 0.721600\n",
      "Epoch 13, CIFAR-10 Batch 1:  Loss:     0.3998    Validation Accuracy: 0.704800\n",
      "Epoch 13, CIFAR-10 Batch 2:  Loss:     0.3819    Validation Accuracy: 0.724800\n",
      "Epoch 13, CIFAR-10 Batch 3:  Loss:     0.3068    Validation Accuracy: 0.728200\n",
      "Epoch 13, CIFAR-10 Batch 4:  Loss:     0.3232    Validation Accuracy: 0.735200\n",
      "Epoch 13, CIFAR-10 Batch 5:  Loss:     0.3797    Validation Accuracy: 0.716800\n",
      "Epoch 14, CIFAR-10 Batch 1:  Loss:     0.3333    Validation Accuracy: 0.730800\n",
      "Epoch 14, CIFAR-10 Batch 2:  Loss:     0.3344    Validation Accuracy: 0.732600\n",
      "Epoch 14, CIFAR-10 Batch 3:  Loss:     0.2775    Validation Accuracy: 0.722200\n",
      "Epoch 14, CIFAR-10 Batch 4:  Loss:     0.2789    Validation Accuracy: 0.727600\n",
      "Epoch 14, CIFAR-10 Batch 5:  Loss:     0.3120    Validation Accuracy: 0.728400\n",
      "Epoch 15, CIFAR-10 Batch 1:  Loss:     0.3184    Validation Accuracy: 0.715800\n",
      "Epoch 15, CIFAR-10 Batch 2:  Loss:     0.3015    Validation Accuracy: 0.743600\n",
      "Epoch 15, CIFAR-10 Batch 3:  Loss:     0.2550    Validation Accuracy: 0.723800\n",
      "Epoch 15, CIFAR-10 Batch 4:  Loss:     0.2421    Validation Accuracy: 0.738200\n",
      "Epoch 15, CIFAR-10 Batch 5:  Loss:     0.2954    Validation Accuracy: 0.715600\n",
      "Epoch 16, CIFAR-10 Batch 1:  Loss:     0.3066    Validation Accuracy: 0.711200\n",
      "Epoch 16, CIFAR-10 Batch 2:  Loss:     0.2903    Validation Accuracy: 0.724000\n",
      "Epoch 16, CIFAR-10 Batch 3:  Loss:     0.2187    Validation Accuracy: 0.726600\n",
      "Epoch 16, CIFAR-10 Batch 4:  Loss:     0.2268    Validation Accuracy: 0.721600\n",
      "Epoch 16, CIFAR-10 Batch 5:  Loss:     0.2680    Validation Accuracy: 0.714800\n",
      "Epoch 17, CIFAR-10 Batch 1:  Loss:     0.2521    Validation Accuracy: 0.729600\n",
      "Epoch 17, CIFAR-10 Batch 2:  Loss:     0.2733    Validation Accuracy: 0.739600\n",
      "Epoch 17, CIFAR-10 Batch 3:  Loss:     0.2197    Validation Accuracy: 0.736400\n",
      "Epoch 17, CIFAR-10 Batch 4:  Loss:     0.2043    Validation Accuracy: 0.731600\n",
      "Epoch 17, CIFAR-10 Batch 5:  Loss:     0.2186    Validation Accuracy: 0.733800\n",
      "Epoch 18, CIFAR-10 Batch 1:  Loss:     0.2470    Validation Accuracy: 0.735000\n",
      "Epoch 18, CIFAR-10 Batch 2:  Loss:     0.2398    Validation Accuracy: 0.741800\n",
      "Epoch 18, CIFAR-10 Batch 3:  Loss:     0.1838    Validation Accuracy: 0.737000\n",
      "Epoch 18, CIFAR-10 Batch 4:  Loss:     0.1753    Validation Accuracy: 0.724000\n",
      "Epoch 18, CIFAR-10 Batch 5:  Loss:     0.2105    Validation Accuracy: 0.729400\n",
      "Epoch 19, CIFAR-10 Batch 1:  Loss:     0.2058    Validation Accuracy: 0.734400\n",
      "Epoch 19, CIFAR-10 Batch 2:  Loss:     0.2169    Validation Accuracy: 0.746800\n",
      "Epoch 19, CIFAR-10 Batch 3:  Loss:     0.1777    Validation Accuracy: 0.737600\n",
      "Epoch 19, CIFAR-10 Batch 4:  Loss:     0.1736    Validation Accuracy: 0.722600\n",
      "Epoch 19, CIFAR-10 Batch 5:  Loss:     0.1669    Validation Accuracy: 0.729400\n",
      "Epoch 20, CIFAR-10 Batch 1:  Loss:     0.2172    Validation Accuracy: 0.737600\n",
      "Epoch 20, CIFAR-10 Batch 2:  Loss:     0.2081    Validation Accuracy: 0.747400\n",
      "Epoch 20, CIFAR-10 Batch 3:  Loss:     0.1376    Validation Accuracy: 0.745600\n",
      "Epoch 20, CIFAR-10 Batch 4:  Loss:     0.1364    Validation Accuracy: 0.723400\n",
      "Epoch 20, CIFAR-10 Batch 5:  Loss:     0.1573    Validation Accuracy: 0.735000\n",
      "Epoch 21, CIFAR-10 Batch 1:  Loss:     0.1941    Validation Accuracy: 0.730800\n",
      "Epoch 21, CIFAR-10 Batch 2:  Loss:     0.1754    Validation Accuracy: 0.744000\n",
      "Epoch 21, CIFAR-10 Batch 3:  Loss:     0.1182    Validation Accuracy: 0.744600\n",
      "Epoch 21, CIFAR-10 Batch 4:  Loss:     0.1139    Validation Accuracy: 0.736800\n",
      "Epoch 21, CIFAR-10 Batch 5:  Loss:     0.1492    Validation Accuracy: 0.739000\n",
      "Epoch 22, CIFAR-10 Batch 1:  Loss:     0.1847    Validation Accuracy: 0.728200\n",
      "Epoch 22, CIFAR-10 Batch 2:  Loss:     0.1382    Validation Accuracy: 0.746400\n",
      "Epoch 22, CIFAR-10 Batch 3:  Loss:     0.1270    Validation Accuracy: 0.745400\n",
      "Epoch 22, CIFAR-10 Batch 4:  Loss:     0.1341    Validation Accuracy: 0.719400\n",
      "Epoch 22, CIFAR-10 Batch 5:  Loss:     0.1397    Validation Accuracy: 0.721200\n",
      "Epoch 23, CIFAR-10 Batch 1:  Loss:     0.1764    Validation Accuracy: 0.731400\n",
      "Epoch 23, CIFAR-10 Batch 2:  Loss:     0.1478    Validation Accuracy: 0.744200\n",
      "Epoch 23, CIFAR-10 Batch 3:  Loss:     0.1083    Validation Accuracy: 0.754600\n",
      "Epoch 23, CIFAR-10 Batch 4:  Loss:     0.0920    Validation Accuracy: 0.743000\n",
      "Epoch 23, CIFAR-10 Batch 5:  Loss:     0.1264    Validation Accuracy: 0.727400\n",
      "Epoch 24, CIFAR-10 Batch 1:  Loss:     0.1581    Validation Accuracy: 0.742600\n",
      "Epoch 24, CIFAR-10 Batch 2:  Loss:     0.1183    Validation Accuracy: 0.754200\n",
      "Epoch 24, CIFAR-10 Batch 3:  Loss:     0.0940    Validation Accuracy: 0.750600\n",
      "Epoch 24, CIFAR-10 Batch 4:  Loss:     0.0778    Validation Accuracy: 0.736800\n",
      "Epoch 24, CIFAR-10 Batch 5:  Loss:     0.1355    Validation Accuracy: 0.728800\n",
      "Epoch 25, CIFAR-10 Batch 1:  Loss:     0.1624    Validation Accuracy: 0.737200\n",
      "Epoch 25, CIFAR-10 Batch 2:  Loss:     0.1075    Validation Accuracy: 0.744000\n",
      "Epoch 25, CIFAR-10 Batch 3:  Loss:     0.0816    Validation Accuracy: 0.750200\n",
      "Epoch 25, CIFAR-10 Batch 4:  Loss:     0.0880    Validation Accuracy: 0.738600\n",
      "Epoch 25, CIFAR-10 Batch 5:  Loss:     0.1088    Validation Accuracy: 0.744600\n",
      "Epoch 26, CIFAR-10 Batch 1:  Loss:     0.1208    Validation Accuracy: 0.745400\n",
      "Epoch 26, CIFAR-10 Batch 2:  Loss:     0.0920    Validation Accuracy: 0.752600\n",
      "Epoch 26, CIFAR-10 Batch 3:  Loss:     0.0810    Validation Accuracy: 0.758800\n",
      "Epoch 26, CIFAR-10 Batch 4:  Loss:     0.0775    Validation Accuracy: 0.747000\n",
      "Epoch 26, CIFAR-10 Batch 5:  Loss:     0.0737    Validation Accuracy: 0.744200\n",
      "Epoch 27, CIFAR-10 Batch 1:  Loss:     0.1018    Validation Accuracy: 0.743800\n",
      "Epoch 27, CIFAR-10 Batch 2:  Loss:     0.0877    Validation Accuracy: 0.754000\n",
      "Epoch 27, CIFAR-10 Batch 3:  Loss:     0.0644    Validation Accuracy: 0.748400\n",
      "Epoch 27, CIFAR-10 Batch 4:  Loss:     0.0568    Validation Accuracy: 0.742400\n",
      "Epoch 27, CIFAR-10 Batch 5:  Loss:     0.0750    Validation Accuracy: 0.742000\n",
      "Epoch 28, CIFAR-10 Batch 1:  Loss:     0.0790    Validation Accuracy: 0.746800\n",
      "Epoch 28, CIFAR-10 Batch 2:  Loss:     0.0861    Validation Accuracy: 0.751400\n",
      "Epoch 28, CIFAR-10 Batch 3:  Loss:     0.0611    Validation Accuracy: 0.757600\n",
      "Epoch 28, CIFAR-10 Batch 4:  Loss:     0.0637    Validation Accuracy: 0.740600\n",
      "Epoch 28, CIFAR-10 Batch 5:  Loss:     0.0708    Validation Accuracy: 0.743800\n",
      "Epoch 29, CIFAR-10 Batch 1:  Loss:     0.0883    Validation Accuracy: 0.742600\n",
      "Epoch 29, CIFAR-10 Batch 2:  Loss:     0.0753    Validation Accuracy: 0.754800\n",
      "Epoch 29, CIFAR-10 Batch 3:  Loss:     0.0476    Validation Accuracy: 0.759200\n",
      "Epoch 29, CIFAR-10 Batch 4:  Loss:     0.0612    Validation Accuracy: 0.734000\n",
      "Epoch 29, CIFAR-10 Batch 5:  Loss:     0.0597    Validation Accuracy: 0.749000\n",
      "Epoch 30, CIFAR-10 Batch 1:  Loss:     0.0730    Validation Accuracy: 0.746400\n",
      "Epoch 30, CIFAR-10 Batch 2:  Loss:     0.0831    Validation Accuracy: 0.752200\n",
      "Epoch 30, CIFAR-10 Batch 3:  Loss:     0.0482    Validation Accuracy: 0.755200\n",
      "Epoch 30, CIFAR-10 Batch 4:  Loss:     0.0465    Validation Accuracy: 0.748400\n",
      "Epoch 30, CIFAR-10 Batch 5:  Loss:     0.0568    Validation Accuracy: 0.757400\n",
      "Epoch 31, CIFAR-10 Batch 1:  Loss:     0.0688    Validation Accuracy: 0.743400\n",
      "Epoch 31, CIFAR-10 Batch 2:  Loss:     0.0660    Validation Accuracy: 0.747800\n",
      "Epoch 31, CIFAR-10 Batch 3:  Loss:     0.0424    Validation Accuracy: 0.740600\n",
      "Epoch 31, CIFAR-10 Batch 4:  Loss:     0.0336    Validation Accuracy: 0.754200\n",
      "Epoch 31, CIFAR-10 Batch 5:  Loss:     0.0475    Validation Accuracy: 0.750200\n",
      "Epoch 32, CIFAR-10 Batch 1:  Loss:     0.0587    Validation Accuracy: 0.750800\n",
      "Epoch 32, CIFAR-10 Batch 2:  Loss:     0.0985    Validation Accuracy: 0.740800\n",
      "Epoch 32, CIFAR-10 Batch 3:  Loss:     0.0396    Validation Accuracy: 0.745000\n",
      "Epoch 32, CIFAR-10 Batch 4:  Loss:     0.0357    Validation Accuracy: 0.750600\n",
      "Epoch 32, CIFAR-10 Batch 5:  Loss:     0.0392    Validation Accuracy: 0.740000\n",
      "Epoch 33, CIFAR-10 Batch 1:  Loss:     0.0575    Validation Accuracy: 0.745400\n",
      "Epoch 33, CIFAR-10 Batch 2:  Loss:     0.0727    Validation Accuracy: 0.734200\n",
      "Epoch 33, CIFAR-10 Batch 3:  Loss:     0.0362    Validation Accuracy: 0.748400\n",
      "Epoch 33, CIFAR-10 Batch 4:  Loss:     0.0274    Validation Accuracy: 0.751800\n",
      "Epoch 33, CIFAR-10 Batch 5:  Loss:     0.0387    Validation Accuracy: 0.745600\n",
      "Epoch 34, CIFAR-10 Batch 1:  Loss:     0.0527    Validation Accuracy: 0.750200\n",
      "Epoch 34, CIFAR-10 Batch 2:  Loss:     0.0553    Validation Accuracy: 0.748200\n",
      "Epoch 34, CIFAR-10 Batch 3:  Loss:     0.0310    Validation Accuracy: 0.750200\n",
      "Epoch 34, CIFAR-10 Batch 4:  Loss:     0.0336    Validation Accuracy: 0.744600\n",
      "Epoch 34, CIFAR-10 Batch 5:  Loss:     0.0328    Validation Accuracy: 0.751600\n",
      "Epoch 35, CIFAR-10 Batch 1:  Loss:     0.0531    Validation Accuracy: 0.753800\n",
      "Epoch 35, CIFAR-10 Batch 2:  Loss:     0.0592    Validation Accuracy: 0.741200\n",
      "Epoch 35, CIFAR-10 Batch 3:  Loss:     0.0320    Validation Accuracy: 0.751600\n",
      "Epoch 35, CIFAR-10 Batch 4:  Loss:     0.0291    Validation Accuracy: 0.744600\n",
      "Epoch 35, CIFAR-10 Batch 5:  Loss:     0.0327    Validation Accuracy: 0.749800\n",
      "Epoch 36, CIFAR-10 Batch 1:  Loss:     0.0492    Validation Accuracy: 0.746600\n",
      "Epoch 36, CIFAR-10 Batch 2:  Loss:     0.0528    Validation Accuracy: 0.751000\n",
      "Epoch 36, CIFAR-10 Batch 3:  Loss:     0.0315    Validation Accuracy: 0.748000\n",
      "Epoch 36, CIFAR-10 Batch 4:  Loss:     0.0218    Validation Accuracy: 0.742200\n",
      "Epoch 36, CIFAR-10 Batch 5:  Loss:     0.0298    Validation Accuracy: 0.752000\n",
      "Epoch 37, CIFAR-10 Batch 1:  Loss:     0.0433    Validation Accuracy: 0.747200\n",
      "Epoch 37, CIFAR-10 Batch 2:  Loss:     0.0493    Validation Accuracy: 0.746400\n",
      "Epoch 37, CIFAR-10 Batch 3:  Loss:     0.0313    Validation Accuracy: 0.752800\n",
      "Epoch 37, CIFAR-10 Batch 4:  Loss:     0.0178    Validation Accuracy: 0.755400\n",
      "Epoch 37, CIFAR-10 Batch 5:  Loss:     0.0351    Validation Accuracy: 0.747200\n",
      "Epoch 38, CIFAR-10 Batch 1:  Loss:     0.0431    Validation Accuracy: 0.752400\n",
      "Epoch 38, CIFAR-10 Batch 2:  Loss:     0.0478    Validation Accuracy: 0.739600\n",
      "Epoch 38, CIFAR-10 Batch 3:  Loss:     0.0415    Validation Accuracy: 0.746800\n",
      "Epoch 38, CIFAR-10 Batch 4:  Loss:     0.0252    Validation Accuracy: 0.739000\n",
      "Epoch 38, CIFAR-10 Batch 5:  Loss:     0.0291    Validation Accuracy: 0.747600\n",
      "Epoch 39, CIFAR-10 Batch 1:  Loss:     0.0515    Validation Accuracy: 0.755000\n",
      "Epoch 39, CIFAR-10 Batch 2:  Loss:     0.0395    Validation Accuracy: 0.744200\n",
      "Epoch 39, CIFAR-10 Batch 3:  Loss:     0.0380    Validation Accuracy: 0.747000\n",
      "Epoch 39, CIFAR-10 Batch 4:  Loss:     0.0202    Validation Accuracy: 0.755000\n",
      "Epoch 39, CIFAR-10 Batch 5:  Loss:     0.0405    Validation Accuracy: 0.736200\n",
      "Epoch 40, CIFAR-10 Batch 1:  Loss:     0.0402    Validation Accuracy: 0.753800\n",
      "Epoch 40, CIFAR-10 Batch 2:  Loss:     0.0360    Validation Accuracy: 0.746400\n",
      "Epoch 40, CIFAR-10 Batch 3:  Loss:     0.0295    Validation Accuracy: 0.748800\n",
      "Epoch 40, CIFAR-10 Batch 4:  Loss:     0.0142    Validation Accuracy: 0.739600\n",
      "Epoch 40, CIFAR-10 Batch 5:  Loss:     0.0320    Validation Accuracy: 0.738000\n",
      "Epoch 41, CIFAR-10 Batch 1:  Loss:     0.0419    Validation Accuracy: 0.753400\n",
      "Epoch 41, CIFAR-10 Batch 2:  Loss:     0.0409    Validation Accuracy: 0.746600\n",
      "Epoch 41, CIFAR-10 Batch 3:  Loss:     0.0346    Validation Accuracy: 0.748400\n",
      "Epoch 41, CIFAR-10 Batch 4:  Loss:     0.0144    Validation Accuracy: 0.750000\n",
      "Epoch 41, CIFAR-10 Batch 5:  Loss:     0.0255    Validation Accuracy: 0.745000\n",
      "Epoch 42, CIFAR-10 Batch 1:  Loss:     0.0482    Validation Accuracy: 0.738400\n",
      "Epoch 42, CIFAR-10 Batch 2:  Loss:     0.0374    Validation Accuracy: 0.742000\n",
      "Epoch 42, CIFAR-10 Batch 3:  Loss:     0.0227    Validation Accuracy: 0.751400\n",
      "Epoch 42, CIFAR-10 Batch 4:  Loss:     0.0159    Validation Accuracy: 0.750800\n",
      "Epoch 42, CIFAR-10 Batch 5:  Loss:     0.0232    Validation Accuracy: 0.748200\n",
      "Epoch 43, CIFAR-10 Batch 1:  Loss:     0.0237    Validation Accuracy: 0.756400\n",
      "Epoch 43, CIFAR-10 Batch 2:  Loss:     0.0338    Validation Accuracy: 0.747800\n",
      "Epoch 43, CIFAR-10 Batch 3:  Loss:     0.0237    Validation Accuracy: 0.744000\n",
      "Epoch 43, CIFAR-10 Batch 4:  Loss:     0.0126    Validation Accuracy: 0.755600\n",
      "Epoch 43, CIFAR-10 Batch 5:  Loss:     0.0173    Validation Accuracy: 0.748800\n",
      "Epoch 44, CIFAR-10 Batch 1:  Loss:     0.0307    Validation Accuracy: 0.746000\n",
      "Epoch 44, CIFAR-10 Batch 2:  Loss:     0.0320    Validation Accuracy: 0.758000\n",
      "Epoch 44, CIFAR-10 Batch 3:  Loss:     0.0163    Validation Accuracy: 0.742200\n",
      "Epoch 44, CIFAR-10 Batch 4:  Loss:     0.0116    Validation Accuracy: 0.750800\n",
      "Epoch 44, CIFAR-10 Batch 5:  Loss:     0.0126    Validation Accuracy: 0.748400\n",
      "Epoch 45, CIFAR-10 Batch 1:  Loss:     0.0250    Validation Accuracy: 0.743400\n",
      "Epoch 45, CIFAR-10 Batch 2:  Loss:     0.0243    Validation Accuracy: 0.753600\n",
      "Epoch 45, CIFAR-10 Batch 3:  Loss:     0.0253    Validation Accuracy: 0.745000\n",
      "Epoch 45, CIFAR-10 Batch 4:  Loss:     0.0121    Validation Accuracy: 0.748000\n",
      "Epoch 45, CIFAR-10 Batch 5:  Loss:     0.0170    Validation Accuracy: 0.756200\n",
      "Epoch 46, CIFAR-10 Batch 1:  Loss:     0.0222    Validation Accuracy: 0.749600\n",
      "Epoch 46, CIFAR-10 Batch 2:  Loss:     0.0281    Validation Accuracy: 0.748200\n",
      "Epoch 46, CIFAR-10 Batch 3:  Loss:     0.0272    Validation Accuracy: 0.745200\n",
      "Epoch 46, CIFAR-10 Batch 4:  Loss:     0.0092    Validation Accuracy: 0.748600\n",
      "Epoch 46, CIFAR-10 Batch 5:  Loss:     0.0137    Validation Accuracy: 0.755600\n",
      "Epoch 47, CIFAR-10 Batch 1:  Loss:     0.0226    Validation Accuracy: 0.746400\n",
      "Epoch 47, CIFAR-10 Batch 2:  Loss:     0.0298    Validation Accuracy: 0.741800\n",
      "Epoch 47, CIFAR-10 Batch 3:  Loss:     0.0106    Validation Accuracy: 0.755400\n",
      "Epoch 47, CIFAR-10 Batch 4:  Loss:     0.0141    Validation Accuracy: 0.741600\n",
      "Epoch 47, CIFAR-10 Batch 5:  Loss:     0.0142    Validation Accuracy: 0.740600\n",
      "Epoch 48, CIFAR-10 Batch 1:  Loss:     0.0214    Validation Accuracy: 0.747400\n",
      "Epoch 48, CIFAR-10 Batch 2:  Loss:     0.0267    Validation Accuracy: 0.753800\n",
      "Epoch 48, CIFAR-10 Batch 3:  Loss:     0.0115    Validation Accuracy: 0.743600\n",
      "Epoch 48, CIFAR-10 Batch 4:  Loss:     0.0087    Validation Accuracy: 0.748400\n",
      "Epoch 48, CIFAR-10 Batch 5:  Loss:     0.0148    Validation Accuracy: 0.754800\n",
      "Epoch 49, CIFAR-10 Batch 1:  Loss:     0.0172    Validation Accuracy: 0.753400\n",
      "Epoch 49, CIFAR-10 Batch 2:  Loss:     0.0345    Validation Accuracy: 0.748400\n",
      "Epoch 49, CIFAR-10 Batch 3:  Loss:     0.0080    Validation Accuracy: 0.744600\n",
      "Epoch 49, CIFAR-10 Batch 4:  Loss:     0.0149    Validation Accuracy: 0.754000\n",
      "Epoch 49, CIFAR-10 Batch 5:  Loss:     0.0227    Validation Accuracy: 0.751000\n",
      "Epoch 50, CIFAR-10 Batch 1:  Loss:     0.0140    Validation Accuracy: 0.748600\n",
      "Epoch 50, CIFAR-10 Batch 2:  Loss:     0.0252    Validation Accuracy: 0.746000\n",
      "Epoch 50, CIFAR-10 Batch 3:  Loss:     0.0068    Validation Accuracy: 0.736200\n",
      "Epoch 50, CIFAR-10 Batch 4:  Loss:     0.0079    Validation Accuracy: 0.750000\n",
      "Epoch 50, CIFAR-10 Batch 5:  Loss:     0.0103    Validation Accuracy: 0.745200\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "save_model_path = './image_classification'\n",
    "\n",
    "print('Training...')\n",
    "with tf.Session() as sess:\n",
    "    # Initializing the variables\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    \n",
    "    # Training cycle\n",
    "    for epoch in range(epochs):\n",
    "        # Loop over all batches\n",
    "        n_batches = 5\n",
    "        for batch_i in range(1, n_batches + 1):\n",
    "            for batch_features, batch_labels in helper.load_preprocess_training_batch(batch_i, batch_size):\n",
    "                train_neural_network(sess, optimizer, keep_probability, batch_features, batch_labels)\n",
    "            print('Epoch {:>2}, CIFAR-10 Batch {}:  '.format(epoch + 1, batch_i), end='')\n",
    "            print_stats(sess, batch_features, batch_labels, cost, accuracy)\n",
    "            \n",
    "    # Save Model\n",
    "    saver = tf.train.Saver()\n",
    "    save_path = saver.save(sess, save_model_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Checkpoint\n",
    "The model has been saved to disk.\n",
    "## Test Model\n",
    "Test your model against the test dataset.  This will be your final accuracy. You should have an accuracy greater than 50%. If you don't, keep tweaking the model architecture and parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Accuracy: 0.7406077682971954\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1f66304f28>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 319,
       "width": 349
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import tensorflow as tf\n",
    "import pickle\n",
    "import helper\n",
    "import random\n",
    "\n",
    "# Set batch size if not already set\n",
    "try:\n",
    "    if batch_size:\n",
    "        pass\n",
    "except NameError:\n",
    "    batch_size = 64\n",
    "\n",
    "save_model_path = './image_classification'\n",
    "n_samples = 4\n",
    "top_n_predictions = 3\n",
    "\n",
    "def test_model():\n",
    "    \"\"\"\n",
    "    Test the saved model against the test dataset\n",
    "    \"\"\"\n",
    "\n",
    "    test_features, test_labels = pickle.load(open('preprocess_training.p', mode='rb'))\n",
    "    loaded_graph = tf.Graph()\n",
    "\n",
    "    with tf.Session(graph=loaded_graph) as sess:\n",
    "        # Load model\n",
    "        loader = tf.train.import_meta_graph(save_model_path + '.meta')\n",
    "        loader.restore(sess, save_model_path)\n",
    "\n",
    "        # Get Tensors from loaded model\n",
    "        loaded_x = loaded_graph.get_tensor_by_name('x:0')\n",
    "        loaded_y = loaded_graph.get_tensor_by_name('y:0')\n",
    "        loaded_keep_prob = loaded_graph.get_tensor_by_name('keep_prob:0')\n",
    "        loaded_logits = loaded_graph.get_tensor_by_name('logits:0')\n",
    "        loaded_acc = loaded_graph.get_tensor_by_name('accuracy:0')\n",
    "        \n",
    "        # Get accuracy in batches for memory limitations\n",
    "        test_batch_acc_total = 0\n",
    "        test_batch_count = 0\n",
    "        \n",
    "        for train_feature_batch, train_label_batch in helper.batch_features_labels(test_features, test_labels, batch_size):\n",
    "            test_batch_acc_total += sess.run(\n",
    "                loaded_acc,\n",
    "                feed_dict={loaded_x: train_feature_batch, loaded_y: train_label_batch, loaded_keep_prob: 1.0})\n",
    "            test_batch_count += 1\n",
    "\n",
    "        print('Testing Accuracy: {}\\n'.format(test_batch_acc_total/test_batch_count))\n",
    "\n",
    "        # Print Random Samples\n",
    "        random_test_features, random_test_labels = tuple(zip(*random.sample(list(zip(test_features, test_labels)), n_samples)))\n",
    "        random_test_predictions = sess.run(\n",
    "            tf.nn.top_k(tf.nn.softmax(loaded_logits), top_n_predictions),\n",
    "            feed_dict={loaded_x: random_test_features, loaded_y: random_test_labels, loaded_keep_prob: 1.0})\n",
    "        helper.display_image_predictions(random_test_features, random_test_labels, random_test_predictions)\n",
    "\n",
    "\n",
    "test_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Why 50-70% Accuracy?\n",
    "You might be wondering why you can't get an accuracy any higher. First things first, 50% isn't bad for a simple CNN.  Pure guessing would get you 10% accuracy. However, you might notice people are getting scores [well above 70%](http://rodrigob.github.io/are_we_there_yet/build/classification_datasets_results.html#43494641522d3130).  That's because we haven't taught you all there is to know about neural networks. We still need to cover a few more techniques.\n",
    "## Submitting This Project\n",
    "When submitting this project, make sure to run all the cells before saving the notebook.  Save the notebook file as \"dlnd_image_classification.ipynb\" and save it as a HTML file under \"File\" -> \"Download as\".  Include the \"helper.py\" and \"problem_unittests.py\" files in your submission."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda env:dl]",
   "language": "python",
   "name": "conda-env-dl-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
